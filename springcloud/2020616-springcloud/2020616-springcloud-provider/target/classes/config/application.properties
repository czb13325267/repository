server.port=8085
server.servlet.context-path=/

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/qy109?useSSL=false&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

mybatis.type-aliases-package=com.aaa.lee.springcloud.model
mybatis.mapper-locations=classpath:mapper/*Mapper.xml

# 配置eureka的注册中心地址(方便于自己向eureka中去注册)
eureka.client.service-url.defaultZone=http://eureka01:6081/eureka,http://eureka02:6082/eureka，http://eureka03:6083/eureka
#配置eureka的实例id
#这个值必须要体现provider的功能以及provider的端口号
eureka.instace.instance-id=book-interface-8085
# 配置当鼠标悬浮否一个provider的时候，显示的不是localhost，直接显示ip地址
eureka.instance.prefer-ip-address=true
# 这个时候发现了其实eureka所显示的provider都是一个a标签，但是点进去之后会报错404(这个时候也是springcloud所给程序员提供的一种便利)
# 当点击a标签的时候，显示的就是provider的开发者，公司名称，provider所提供的功能，provider下所有controller以及调用方法
# info开头--->剩下的信息你可以随意去编写
# 如果想要让以下信息生效，就必须要添加jar包(必须要添加actuator的jar包)
info.author.name=赵又廷
info.company.name=AAA Software EDU
info.project.description=Test Book Demo
info.fahjhfj.dajhfjahf=fhdskjfhsjhfdjkhf
# 虽然已经成功的运行起来了，但是会有一个问题存在Application的值是UNKNOWN
# 以后consumer就不会再通过ip地址来访问provider了，有了eureka之后，会通过eureka的Application的值来进行访问
# 除了负载均衡之外，绝对不能重复
spring.application.name=book-interface

# 失效eureka的自我保护机制
# 配置自己向eureka去发送心跳的时间(单位是秒)
eureka.instance.lease-renewal-interval-in-seconds=5
# 配置在eureka最后一次接收到心跳往后数几秒进行剔除
eureka.instance.lease-expiration-duration-in-seconds=8




